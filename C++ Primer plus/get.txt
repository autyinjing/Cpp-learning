1. 头文件常包含的内容： 函数原型、使用#define或const定义的符号常量、结构声明、类声明、模板声明、内联函数;

2. 不同的编译器将为 同一个函数 生成不同的修饰名称，导致链接器无法将  两个编译器生成的函数定义  匹配，解决方法是用同一个编译器生成所有对象文件;

3. 静态持续变量：链接性为外部 例：在函数外声明 int a = 100;
		 链接性为内部 例：在函数外声明 static int b = 200;
		 没有链接性   例：在函数内部声明 static int c = 300;

		 作用域为程序的整个执行期间;

4. 单定义规则：外部变量只能在一个文件中定义，在其他文件中要引用时必须使用关键字extern进行引用声明;

5. C++提供了作用域解析运算符(::)，将其放在变量名前面表示使用该变量的全局版本;

6. 在一个文件中无论任何位置声明了extern外部变量，该变量的作用域均为整个文件;

7. 使用static修饰的变量其链接性为内部，与同名的外部变量并不冲突;

8. mutable修饰结构成员，使其能够在该结构被const修饰的情况下仍能修改该成员的值;

9. const修饰的变量的链接性为内部，相当于static;

10. using编译指令将使  名称空间中的名称  在  指令所在区域内  可用 例：using namespace std;
    using声明声明了  指定的名称  ，使其在指令所在区域内可用 例：using std::cout;
    解析运算符可以使其解析的名称在该语句位置可用 例：std::cout;

11. 名称空间可以嵌套声明,类似于结构;

12. 扩展名称空间内的函数时，需要在  返回值类型后  解析函数名; 例：void SALES::setSales( Sales & s );
