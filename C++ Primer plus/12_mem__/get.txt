1. 在类中声明静态成员可以让所有该类的对象共享一个变量，还可以记录所创建的对象数目;

2. 可以在类声明之外使用单独语句来初始化静态类成员，因为静态类成员是单独存储，不是对象的组成成分;

3. 如果在定义类时没有提供任何构造函数，则编译器将提供一个不做任何操作的默认构造函数;

4. 何时调用复制构造函数：①新建一个对象并将其初始化为现有对象; 例，StringBad metoo = motoo;
			 ②当函数按值传递对象或返回对象时，因为按值传递意味着要创建原始变量的一个副本，
			  编译器生成临时对象时将使用复制构造函数; 例，callme2(headline2);

5. 默认复制构造函数的功能：逐个赋值非静态成员（浅复制，复制的是成员的值）;

6. 如果类中包含静态数据成员，则应该提供一个显式的复制构造函数来处理计数问题;

7. 定义一个显式复制构造函数进行深度复制（复制指向的数据，而不是指针）从而解决复制指向同一内存块指针的问题;

8. 复制构造函数的定义方法：
	className::className( const className & Object )
	{
	}

9. 重载后的默认赋值运算符的功能是隐式地对类成员进行复制，但不会影响静态成员，将已有对象赋给另一个对象时，将使用重载的赋值运算符;

10. 如何为类编写重载后的赋值运算符？例：
	StringBad & StringBad::operator=( const StringBad & st )
	{
		if ( this == &st )
		      return *this; 	//检查自我复制
		delete [] str; 		//删除原来占用的内存
		len = st.len;
		str = new char [len+1]; //申请新内存
		std::strcpy(str, st.str); //复制原值
		return *this; 		//返回原对象的引用
	} 				//实质就是为原来的对象重新分配了内存

11. 默认构造函数的定义方法; 例：
	String::String()
	{
		len = 0;
		str = new char[1]; /*注意：使用new char[1]而不是new char的原因是为了与析构函数中的delete [] str匹配，
					   如果使用new char，将产生不可预料的后果;*/
		str[0] = '\0';
	}

12. C++11的空指针：nullptr;

13. 静态成员函数: 在声明时要包含关键字static，但独立定义时不能包含static;
		  由于不与特定的对象相关联，因此只能使用静态数据成员;
		  不能通过对象调用静态成员函数，甚至不能使用this指针;
		  若声明位于类的公有部分，则可以使用类名和作用域解析运算符来调用。

14. 通常，如果Class_name是类，value的类型为Type_name，则下面的语句：
	Class_name * pclass = new Class_name(value);
	将调用如下构造函数：Class_name(Type_name);
	有可能有一些转换Class_name(const Type_name &);

	最终使用new初始化pclass指针.

15. 如何释放new定位运算符为类对象分配的内存？--显式调用析构函数！例：pc3->~JustTesting();
	如果有多个对象，则调用顺序应该与分配顺序相反.

16. 成员初始化列表，例：Queue::Queue(int qs) : qsize(qs), front(NULL), rear(NULL), item(0);
			{
			}
	作用：可以在类构造函数中初始化const修饰的类成员和被声明为引用的类成员;
	注意：只能用于类构造函数！

17. 当不需要使用类的复制构造函数和重载赋值运算符而又担心出错时，可以将它们声明为类的私有方法，这样在检测到使用
	这些功能时编译器会报错便于跟踪调试程序.
